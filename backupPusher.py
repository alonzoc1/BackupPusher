"""Backup Pusher
This software copies several files and folders to a specified location while
keeping the original structure intact. It also allows for specific folder or file
exclusion. I'm intending to use this personally to populate a folder that is automatically
sync'd with my online cloud storage solution.
Copyright 2018, Alonzo Castanon"""

import shutil
import os
import ast

def write_config(target_directory, source_directories):
    """Writes a config file that stores the target directory and
    source directories. Target directory is provided as a full
    path string, source directories represented as a list of
    full path strings."""
    with open("./config", "w") as config_file:
        to_write = ""
        to_write += target_directory + "\n"
        to_write += str(source_directories)
        config_file.write(to_write)

def read_config():
    """Reads file generated by "write_config" above. Returns all
    necessary data (source dir, target dirs, extensions to exclude)
    as a tuple of string and list of strings."""
    with open("./config") as config_file:
        target_directory = config_file.readline()[:-1]
        source_directories = ast.literal_eval(config_file.readline())
    return (target_directory, source_directories)

def find_common_directory(directory_x, directory_y):
    """Given two strings containing paths to directories, find the
    lowest level parent directory that they share and return it's path.
    If none are found, return False"""
    x_path = directory_x.split("\\")
    y_path = directory_y.split("\\")
    result_path = ""
    ticker = len(x_path)
    if ticker > len(y_path):
        ticker = len(y_path)
    for i in range(ticker):
        if x_path[i] == y_path[i]:
            result_path += x_path[i] + "\\"
        else:
            break
    if result_path == "":
        return None
    return result_path

def find_parent_directory(sources):
    """Given a list of source directories, compare each of them and
    find the lowest level common parent directory."""
    highest = sources[0]
    for source in sources:
        highest = find_common_directory(highest, source)
    return highest

def strip_sources(sources, parent_len):
    """Given a list of source directories and a common parent
    directory, strip the source directories to their locations
    relative to the common parent"""
    result = []
    for source in sources:
        new_source = ""
        for directory in enumerate(source.split("\\")):
            if directory[0] >= (parent_len-1):
                new_source += (directory[1]) + "\\"
        result.append(new_source)
    return result

def ensure_hierarchy(hierarchy_path):
    """Simply checks that all necessary directories are created
    along a particular path for copying files there. Creates
    them if necessary."""
    path = os.fsencode(hierarchy_path)
    os.makedirs(path, exist_ok=True)

def copy_directory(source, copy_loc):
    """Given a source directory, copy ONLY the files in the directory
    to the target directory, creating parent directories as necessary"""
    ensure_hierarchy(copy_loc)
    source = os.fsencode(source)
    for file in os.scandir(source):
        if file.is_file(follow_symlinks=False):
            shutil.copy(os.fsdecode(file.path), copy_loc)

def push_backups(config_data):
    """Given config data (a tuple in the shape of the output from
    read_config), copy all appropriate files from the source directories
    to the target directory, ignoring certain extensions."""
    target = config_data[0]
    sources = config_data[1]
    parent = find_parent_directory(sources)
    copy_locations = strip_sources(sources, len(parent.split("\\")))
    parent = parent.split("\\")[-2]
    target += parent + "\\"
    for source in enumerate(sources):
        copy_directory(source[1], target + copy_locations[source[0]])

def main():
    """Main function, reads config file and passes it to push_backups
    for copying"""
    config_data = read_config()
    push_backups(config_data)
